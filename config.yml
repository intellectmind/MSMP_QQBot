# QQBotBridge 配置文件

# Minecraft Server Management Protocol (MSMP) 配置
msmp:
  # 是否启用MSMP（推荐：功能最完整，需版本1.21.9+，需关闭management-server-tls）
  enabled: false
  # MSMP服务器地址
  host: localhost
  # MSMP端口 (需要在服务端配置文件中设置 management-server-port)
  port: 21111
  # MSMP认证令牌 (需要在服务端配置文件中设置 management-server-secret)
  password: your_msmp_password_here

# RCON连接配置
rcon:
  # 是否启用RCON（与MSMP同时启用时优先走MSMP通道，版本1.21.9以下可单独使用这个）
  enabled: false
  # RCON服务器地址
  host: localhost
  # RCON端口
  port: 25575
  # RCON密码
  password: your_rcon_password_here

# WebSocket反向连接配置
websocket:
  # WebSocket监听端口 (反向WS连接到此端口)
  port: 8080
  # 鉴权令牌 (可选)
  token: ""
  # 是否启用鉴权
  auth_enabled: false

# QQ机器人配置
qq:
  # 允许使用机器人的QQ群号列表
  groups:
    - 123456789  # 群号
    - 234567891   # 可以添加更多群号

  # QQ管理员列表 (可以使用start/stop命令的用户)
  admins:
    - 123456789  # 管理员QQ
    - 987654321  # 可以添加更多管理员QQ

  # 欢迎新成员消息
  welcome_new_members: false
  welcome_message: "欢迎新成员加入！输入 help 查看可用命令"

# 服务器启动配置
server:
  # 服务器启动脚本路径 (支持.bat/.sh文件)
  start_script: "G:/1.21.9/start.bat"
  # 工作目录 (可选，不填则使用脚本所在目录)
  working_directory: ""
  # 服务器启动超时时间（秒）
  startup_timeout: 300

# 命令配置
commands:
  # TPS命令配置 - 群内使用tps命令时执行的指令，可根据服务器类型自定义
  tps_command: tps

  # 基础命令开关配置，管理员不受此限制，始终可以使用所有命令
  enabled_commands:
    list: true    # 玩家列表命令
    tps: true     # TPS查询命令
    rules: true   # 规则查询命令
    status: true  # 状态查询命令
    help: true    # 帮助命令

  # 否开放管理员命令，开放后非管理员也可以使用管理员命令，管理员不受此限制
  enabled_admin_commands:
    start: false          # 启动服务器命令
    stop: false           # 停止服务器命令
    kill: false           # 强制停止服务器命令
    reload: false         # 重载配置命令
    log: false            # 查看服务器日志命令
    reconnect: false      # 重连所有服务命令
    reconnect_msmp: false # 重连MSMP命令
    reconnect_rcon: false # 重连RCON命令
    crash: false          # 崩溃报告命令
    sysinfo: false        # 系统信息命令
    disk: false           # 磁盘信息命令
    process: false        # 进程信息命令
    network: false        # 网络信息命令
    listeners: false      # 监听规则命令

# 通知配置
notifications:
  # 是否发送服务器事件通知（启动/关闭）
  server_events: true
  # 是否发送玩家事件通知（加入/离开）
  player_events: true
  # 是否在控制台显示详细消息日志
  log_messages: false
  # 需搭配chunkmonitor插件使用，并启用控制台（https://github.com/intellectmind/ChunkMonitor）
  chunk_monitor:
    # 是否启用区块监控通知
    enabled: true
    # 是否向管理员发送私聊通知
    notify_admins: true
    # 是否向QQ群发送通知
    notify_groups: true

# 高级配置
advanced:
  # MSMP重连间隔（秒）
  reconnect_interval: 300
  # 心跳间隔（秒）
  heartbeat_interval: 30
  # 命令冷却时间（秒）
  command_cooldown: 3
  # 最大消息长度
  max_message_length: 2500
  # 玩家列表缓存时间（秒）
  player_list_cache_ttl: 5
  # 最大服务器日志行数
  max_server_logs: 100

# 调试模式
debug: false

# ============================================================
# 自定义服务端消息监听规则配置
# ============================================================
# 这个功能允许你通过正则表达式监听服务器日志
# 匹配成功时可以向QQ群发送消息或向服务端执行指令
custom_listeners:
  # 是否启用自定义监听功能
  enabled: false
  
  # 监听规则列表 - 可以添加无限个规则 
  rules:
    # 示例1: 玩家加入游戏的高级通知
    - name: "player_join_advanced"
      description: "玩家加入游戏时发送智能通知"
      enabled: true
      pattern: "(\\w+) joined the game"
      case_sensitive: false
      trigger_limit: 0        # 0表示无限制
      trigger_cooldown: 0     # 冷却时间（秒），0表示无冷却
      daily_limit: 0          # 每日限制，0表示无限制
      conditions:
        - type: "time_range"
          params:
            start: "08:00"
            end: "23:00"
        - type: "player_online"
          params:
            require: true
      qq_message: |
        玩家 {upper(group1)} 加入了游戏！
        服务器状态: TPS {server_tps} | 在线: {player_count}人
        时间: {time} | 规则: {rule_name}
        今日第 {trigger_today} 次玩家加入
      server_command: "say 欢迎 {upper(group1)} 加入游戏！当前在线: {player_count} 人"

    # 示例2: 服务器错误监控
    - name: "error_monitor"
      description: "监控服务器错误并通知管理员"
      enabled: true
      pattern: "\\[ERROR\\].*?(Exception|Error|Crash|Failed)"
      case_sensitive: false
      trigger_limit: 0
      trigger_cooldown: 300   # 5分钟冷却
      daily_limit: 5          # 每天最多5次
      conditions:
        - type: "server_tps"
          params:
            min_tps: 5
            max_tps: 20
      qq_message: |
        服务器错误告警！
        错误内容: {substr(match, 0, 100)}
        发生时间: {timestamp}
        当前TPS: {server_tps}
        在线玩家: {player_count}人
      server_command: "say 检测到服务器错误，请查看控制台日志"

    # 示例3: 玩家聊天关键词监控
    - name: "chat_keyword_alert"
      description: "监控玩家聊天中的关键词"
      enabled: true
      pattern: "<(\\w+)>.*?(作弊|外挂|bug|漏洞|hack|cheat)"
      case_sensitive: false
      trigger_limit: 0
      trigger_cooldown: 30    # 30秒冷却
      daily_limit: 0
      qq_message: |
        聊天关键词告警
        玩家: {group1}
        内容: {substr(match, 0, 50)}
        时间: {time}
      server_command: ""

    # 示例4: 服务器性能告警
    - name: "performance_alert"
      description: "服务器性能下降告警"
      enabled: true
      pattern: "Can't keep up!.*"
      case_sensitive: false
      trigger_limit: 3
      trigger_cooldown: 600   # 10分钟冷却
      daily_limit: 0
      conditions:
        - type: "memory_usage"
          params:
            max_usage: 90
      qq_message: |
        服务器性能告警！
        问题: {match}
        时间: {timestamp}
        当前TPS: {server_tps}
        内存: {memory_usage}%
        建议: {if(memory_usage > 80, '考虑重启释放内存', '检查插件性能')}
      server_command: "save-all"

    # 示例5: 玩家死亡通知
    - name: "player_death_smart"
      description: "玩家死亡时发送智能通知"
      enabled: true
      pattern: "(\\w+) (was slain by|was shot by|fell|drowned|burned|blown up|died)"
      case_sensitive: false
      trigger_limit: 0
      trigger_cooldown: 10
      daily_limit: 0
      qq_message: |
        玩家死亡事件
        玩家: {group1}
        原因: {replace(match, '^\\w+ ', '')}
        时间: {time}
        统计: 今日第 {trigger_today} 次死亡
      server_command: ""

# ============================================================
# 规则配置说明
# ============================================================
#
# 基础规则参数解释：
#   name          - 规则唯一标识符（用于日志记录和管理）
#   description   - 规则的详细描述
#   enabled       - 是否启用此规则 (true/false)
#   pattern       - Python正则表达式
#   qq_message    - 匹配时向QQ群发送的消息
#   server_command- 匹配时向服务端执行的指令
#
# 高级规则参数解释：
#   case_sensitive - 是否大小写敏感 (默认: false)
#   trigger_limit  - 触发次数限制 (0=无限制, 默认: 0)
#   trigger_cooldown - 冷却时间(秒) (0=无冷却, 默认: 0)
#   daily_limit    - 每日触发限制 (0=无限制, 默认: 0) 
#   conditions     - 执行条件列表 (详见条件配置说明)
#
# 限制说明：
#   - qq_message 和 server_command 至少需要配置一个（不能同时为空）
#   - pattern 是必需的，且必须是有效的正则表达式
#   - 支持无限个规则
#
# ============================================================
# 占位符系统说明
# ============================================================
#
# 基础占位符（在消息和指令中使用）：
#   {match}        - 完整匹配内容
#   {group1}       - 正则中第1个 (...) 捕获的内容
#   {group2}       - 正则中第2个 (...) 捕获的内容
#   {group3}       - 依此类推...
#   {match_full}   - 同 {match}
#
# 系统信息占位符：
#   {timestamp}    - 当前完整时间 (格式: YYYY-MM-DD HH:MM:SS)
#   {date}         - 当前日期 (格式: YYYY-MM-DD)
#   {time}         - 当前时间 (格式: HH:MM:SS)
#   {weekday}      - 星期几 (周一-周日)
#   {server_tps}   - 服务器TPS (每秒刻数)
#   {player_count} - 在线玩家数量
#   {memory_usage} - 内存使用率百分比
#   {rule_name}    - 当前规则名称
#   {match_count}  - 该规则的总匹配次数
#   {trigger_today}- 该规则今天的触发次数
#   {prev_match_time} - 上次匹配时间
#
# 函数式占位符（支持嵌套和复杂逻辑）：
#   {upper(text)}              - 将文本转换为大写
#   {lower(text)}              - 将文本转换为小写
#   {substr(text, start, end)} - 截取文本子串 (从start到end)
#   {repeat(text, count)}      - 重复文本指定次数
#   {replace(text, old, new)}  - 替换文本中的内容
#   {length(text)}             - 获取文本长度
#   {trim(text)}               - 去除文本首尾空格
#   {contains(text, substr)}   - 检查文本是否包含子串
#   {startsWith(text, prefix)} - 检查文本是否以指定前缀开头
#   {endsWith(text, suffix)}   - 检查文本是否以指定后缀结尾
#   {if(cond, true, false)}    - 条件判断 (cond为真返回true，否则返回false)
#   {split(text, sep)}         - 按分隔符分割文本
#   {join(sep, list)}          - 用分隔符连接列表
#
# ============================================================
# 条件配置说明
# ============================================================
#
# conditions 字段配置格式：
#   conditions:
#     - type: "条件类型"
#       params:
#         参数1: 值1
#         参数2: 值2
#
# 支持的条件类型：
#
# 1. 时间范围条件 (time_range)
#   作用: 只在指定时间范围内触发规则
#   参数:
#     start: "HH:MM"  # 开始时间 (24小时制)
#     end: "HH:MM"    # 结束时间 (24小时制)
#   示例:
#     - type: "time_range"
#       params:
#         start: "08:00"
#         end: "22:00"
#
# 2. 玩家在线条件 (player_online)
#   作用: 根据玩家在线状态决定是否触发
#   参数:
#     require: true/false  # true=需要玩家在线, false=需要无玩家在线
#   示例:
#     - type: "player_online"
#       params:
#         require: true
#
# 3. 服务器TPS条件 (server_tps)
#   作用: 根据服务器TPS性能决定是否触发
#   参数:
#     min_tps: 数值  # 最小TPS值
#     max_tps: 数值  # 最大TPS值
#   示例:
#     - type: "server_tps"
#       params:
#         min_tps: 10.0
#         max_tps: 20.0
#
# 4. 内存使用条件 (memory_usage)
#   作用: 根据内存使用率决定是否触发
#   参数:
#     max_usage: 数值  # 最大内存使用率百分比
#   示例:
#     - type: "memory_usage"
#       params:
#         max_usage: 80.0
#
# 5. 重复间隔条件 (repeat_interval)
#   作用: 防止规则频繁触发
#   参数:
#     interval: 秒数  # 最小触发间隔
#   示例:
#     - type: "repeat_interval"
#       params:
#         interval: 300  # 5分钟
#
# 6. 星期几条件 (weekday)
#   作用: 只在特定日期触发
#   参数:
#     weekdays: [0,1,2,3,4]  # 0=周一, 6=周日
#   示例:
#     - type: "weekday"
#       params:
#         weekdays: [0, 1, 2, 3, 4]  # 周一到周五
#
# ============================================================
# 正则表达式说明
# ============================================================
#
# 常用元字符：
#   \\w         - 单词字符 [a-zA-Z0-9_]
#   \\d         - 数字 [0-9]
#   \\s         - 空白字符 (空格、制表符、换行等)
#   \\S         - 非空白字符
#   .           - 任意单个字符 (除了换行符)
#   .*          - 任意字符序列 (0个或多个)
#   .+          - 任意字符序列 (1个或多个)
#   .?          - 任意字符序列 (0个或1个)
#
# 分组和捕获：
#   (...)       - 捕获分组 (可在占位符中使用 {group1} 等引用)
#   (?:...)     - 非捕获分组 (不保存匹配内容)
#   |           - 或关系
#
# 数量限定：
#   *           - 0次或多次
#   +           - 1次或多次
#   ?           - 0次或1次
#   {n}         - 恰好n次
#   {n,}        - 至少n次
#   {n,m}       - n到m次
#
# ============================================================